-------------------------------------------------------------------------------CHALLENGE - 1

class Point:  
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def sqSum(self):
        return self.x**2 + self.y**2 + self.z**2

# Sample properties: x=1, y=3, z=5
point = Point(1, 3, 5)

# Calculate and print the squared sum of x, y, and z
result = point.sqSum()
print(result) 

# Output: 35


---------------------------------------------------------------CHALLENGE = 2
class Calculator:
    def __init__(self, num1, num2):
        self.num1 = num1
        self.num2 = num2
    
    def add(self):
        return self.num1 + self.num2

    def subtract(self):
        return self.num2 - self.num1

    def multiply(self):
        return self.num1 * self.num2
    
    def divide(self):
        return self.num2 / self.num1

# Sample Input
obj = Calculator(10, 94)
result_add = obj.add()
result_subtract = obj.subtract()
result_multiply = obj.multiply()
result_divide = obj.divide()

# Sample Output
print(result_add)       # Output: 104
print(result_subtract)  # Output: 84
print(result_multiply)  # Output: 940
print(result_divide)    # Output: 9.4
------------------------------------------------------------------CHALLENGE = 3
class Student:
    def setName(self, name):
        self.__name = name

    def getName(self):
        return self.__name

    def setRollNumber(self, roll_number):
        self.__roll_number = roll_number

    def getRollNumber(self):
        return self.__roll_number

# Creating a Student object
student = Student()

# Setting name and roll number using setter methods
student.setName("shivam sharma")
student.setRollNumber(1100)

# Getting name and roll number using getter methods
name = student.getName()
roll_number = student.getRollNumber()

# Printing the results
print("Name:", name) 
print("Roll Number:", roll_number)

# Output: Name: shivam sharma
# Output: Roll Number: 1100
----------------------------------------------------CHALLENGE = 4
class Account:
    def __init__(self, title, balance):
        self.title = title
        self.balance = balance

class SavingsAccount(Account):
    def __init__(self, title, balance, interestRate):
        super().__init__(title, balance)
        self.interestRate = interestRate

# Creating an Account object
account = Account("Ashish", 5000)

# Creating a SavingsAccount object
savings_account = SavingsAccount("Ashish", 5000, 5)

# Printing properties of Account
print("Account Title:", account.title)
print("Account Balance:", account.balance)

# Printing properties of SavingsAccount
print("Savings Account Title:", savings_account.title)
print("Savings Account Balance:", savings_account.balance)
print("Savings Account Interest Rate:", savings_account.interestRate)
#output:

Account Title: Ashish
Account Balance: 5000
Savings Account Title: Ashish
Savings Account Balance: 5000
Savings Account Interest Rate: 5
-----------------------------------------------------------------CHALLENGE= 5
class Account:
    def __init__(self, title=None, balance=0):
        self.title = title
        self.balance = balance
    
    def withdrawal(self, amount):
        self.balance -= amount
    
    def deposit(self, amount):
        self.balance += amount
    
    def getBalance(self):
        return self.balance

class SavingsAccount(Account):
    def __init__(self, title=None, balance=0, interestRate=0):
        super().__init__(title, balance)
        self.interestRate = interestRate
    
    def interestAmount(self):
        return (self.interestRate * self.balance) / 100

# Code to test
demo1 = SavingsAccount("Ashish", 2000, 5)

# Performing operations
demo1.deposit(588)
balance_after_deposit = demo1.getBalance()
print("Balance after deposit:", balance_after_deposit)  # Output: Balance after deposit: 2588

demo1.withdrawal(500)
balance_after_withdrawal = demo1.getBalance()
print("Balance after withdrawal:", balance_after_withdrawal)  # Output: Balance after withdrawal: 2088

interest_amount = demo1.interestAmount()
print("Interest amount:", interest_amount)  # Output: Interest amount: 104
